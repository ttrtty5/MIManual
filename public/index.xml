<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>目录 on MIV 文档</title>
    <link>https://ttrtty5.github.io/MIManual/public/</link>
    <description>Recent content in 目录 on MIV 文档</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 30 Oct 2021 22:32:58 +0800</lastBuildDate><atom:link href="https://ttrtty5.github.io/MIManual/public/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>access_error()</title>
      <link>https://ttrtty5.github.io/MIManual/public/%E8%84%9A%E6%9C%AC/access_error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ttrtty5.github.io/MIManual/public/%E8%84%9A%E6%9C%AC/access_error/</guid>
      <description>描述 当获取working_directory工作目录路径失败时, 调用此函数告诉用户使用管理员权限运行.</description>
    </item>
    
    <item>
      <title>app</title>
      <link>https://ttrtty5.github.io/MIManual/public/%E7%89%A9%E4%BD%93/app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ttrtty5.github.io/MIManual/public/%E7%89%A9%E4%BD%93/app/</guid>
      <description>事件 创建事件: app_event_create()
每帧更新事件: app_event_step()
绘制事件: app_event_draw()
实例变量 debug_info(布尔)
startup_last_crash(布尔)
startup_error(布尔)
tl_edit(int) id value_name_list
value_default 在project_reset()中初始化</description>
    </item>
    
    <item>
      <title>app_event_create()</title>
      <link>https://ttrtty5.github.io/MIManual/public/%E8%84%9A%E6%9C%AC/app_event_create/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ttrtty5.github.io/MIManual/public/%E8%84%9A%E6%9C%AC/app_event_create/</guid>
      <description>描述 应用程序的入口点。
内容流程 声明全局变量 debug_indent, debug_timer;
声明枚举
随机化种子
启动程序 app_startup()
若启动失败则触发game_end()游戏结束事件</description>
    </item>
    
    <item>
      <title>app_event_draw()</title>
      <link>https://ttrtty5.github.io/MIManual/public/%E8%84%9A%E6%9C%AC/app_event_draw/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ttrtty5.github.io/MIManual/public/%E8%84%9A%E6%9C%AC/app_event_draw/</guid>
      <description>描述 绘制程序的入口点
内容流程 全局变量
delta 每帧之间相差时间
设置字体
设置字体颜色
调用窗口绘制函数 window_draw()</description>
    </item>
    
    <item>
      <title>app_startup()</title>
      <link>https://ttrtty5.github.io/MIManual/public/%E8%84%9A%E6%9C%AC/app_startup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ttrtty5.github.io/MIManual/public/%E8%84%9A%E6%9C%AC/app_startup/</guid>
      <description>内容流程 启动日志系统 log_startup()
加载外部程序dll lib_startup()
文件系统检测是否可用 file_lib_startup()
检测是否存在 地图导入exe, 配置文件&amp;quot;legacy.midata&amp;quot;, 语言文件&amp;quot;english.milanguage&amp;quot;
3d系统 顶点初始化 vertex_format_startup()
内部数据列表初始化 app_startup_lists()
声明app实例的一堆属性 app_startup_window()
声明app实例的关于alert的属性 alert_startup
声明json解析会用到的变量 json_startup()
做好加载settings的准备并加载settings settings_startup()
project_startup()
render_startup()
camera_startup()
做好加载mc资产包的准备并加载mc资产包 minecraft_assets_startup 里面的minecraft_assets_load_startup_version()才是加载</description>
    </item>
    
    <item>
      <title>app_startup_lists()</title>
      <link>https://ttrtty5.github.io/MIManual/public/%E8%84%9A%E6%9C%AC/app_startup_lists/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ttrtty5.github.io/MIManual/public/%E8%84%9A%E6%9C%AC/app_startup_lists/</guid>
      <description>内容流程 填充 value_name_list
填充过渡曲线类型列表 transition_list
填充语言字典 language_map
声明全局变量 globalvar value_name_list, transition_list;globalvar temp_type_name_list, tl_type_name_list, res_type_name_list;globalvar videotemplate_list, videoquality_list;globalvar language_english_map, language_map;globalvar camera_values_list, camera_values_copy, camera_use_default_list;globalvar minecraft_color_name_list, minecraft_color_list, minecraft_banner_pattern_list, minecraft_banner_pattern_short_list;globalvar biome_list, particle_template_list, particle_template_map;globalvar blend_mode_list, blend_mode_map; </description>
    </item>
    
    <item>
      <title>app_startup_window()</title>
      <link>https://ttrtty5.github.io/MIManual/public/%E8%84%9A%E6%9C%AC/app_startup_window/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ttrtty5.github.io/MIManual/public/%E8%84%9A%E6%9C%AC/app_startup_window/</guid>
      <description>globalvar current_step, minute_steps, delta;current_step = 0minute_steps = 60 * 60delta = 1log(&amp;quot;Windows startup&amp;quot;)http_assets = nullhttp_download_assets_file = nullhttp_download_assets_zip = nullhttp_alert_news = nullhttp_downloadskin = nullwindow_width = 1window_height = 1window_set_focus()window_set_min_width(100)window_set_min_height(100)window_set_caption(&amp;quot;Mine-imator&amp;quot;)window_state = &amp;quot;&amp;quot;window_busy = &amp;quot;&amp;quot;window_focus = &amp;quot;&amp;quot;window_glow_top = 0window_glow_right = 0window_glow_bottom = 0window_glow_left = 0window_cover = 1mouse_cursor = cr_defaultmouse_current_x = 0mouse_current_y = 0mouse_previous_x = 0mouse_previous_y = 0mouse_move = 0mouse_still = 0app_mouse_clear()dragger_drag_value = 0meter_drag_value = 0wheel_drag_value = 0wheel_drag_moon = falsesortlist_resize = nullsortlist_resize_column = 0sortlist_resize_column_x = 0content_x = 0content_y = 0content_width = 0content_height = 0content_mouseon = falsecontent_tab = nullcontent_direction = nulldx = 0dy = 0dw = 0dh = 0dx_start = 0dy_start = 0dw_start = 0dh_start = 0tab = nulltab_control_h = 0// Tipstip_show = falsetip_alpha = 0tip_text = &amp;quot;&amp;quot;tip_text_wrap = &amp;quot;&amp;quot;tip_x = 0tip_y = 0tip_w = 0tip_h = 0tip_box_x = 0tip_box_y = 0tip_maxwid = 270tip_padding = 10tip_location_x = 0tip_location_y = 0tip_wrap = truetip_shortcut_key = -1tip_shortcut_control = false// Popupspopup = nullpopup_ani = 0popup_ani_type = &amp;quot;&amp;quot;popup_switch_to = nullpopup_switch_from = nullpopup_mouseon = false </description>
    </item>
    
    <item>
      <title>how to add a shader in miv</title>
      <link>https://ttrtty5.github.io/MIManual/public/%E4%BB%A3%E7%A0%81%E4%BF%AE%E6%94%B9%E6%A1%88%E4%BE%8B/how-to-add-a-shader-in-miv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ttrtty5.github.io/MIManual/public/%E4%BB%A3%E7%A0%81%E4%BF%AE%E6%94%B9%E6%A1%88%E4%BE%8B/how-to-add-a-shader-in-miv/</guid>
      <description>how to add a post-progress shader in mine-imator Pipeline  the rendering pipeline in mine_imator (preview)
app_event_draw() ↓ window_draw() ↓ panel_area_draw() ↓ view_area_draw() ↓ view_draw(view_main) // view_main = new(obj_view) in app_startup_views()  ↓ view_update() ↓ view_update_surface() ↓ render_high() ← action_toolbar_export ↓ render_high_xxx()   Step by step   create your own shader, e,g:shader_test. find a file calledrender_startup.gml
1.1. in this file, there is a ds_map() that is used to initialize shaders&#39; name.</description>
    </item>
    
    <item>
      <title>obj_timeline</title>
      <link>https://ttrtty5.github.io/MIManual/public/%E7%89%A9%E4%BD%93/obj_timeline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ttrtty5.github.io/MIManual/public/%E7%89%A9%E4%BD%93/obj_timeline/</guid>
      <description>描述 物体在时间线的上数据对象
对象属性 save_id = &amp;quot;&amp;quot; 存储id value[v] = value_default[v] 根据e_value_type填充的关键帧属性
save_id = &amp;quot;&amp;quot; 存储idloaded = falsetype = nulltype_name = &amp;quot;&amp;quot;name = &amp;quot;&amp;quot;display_name = &amp;quot;&amp;quot;temp = nulltext = text_get(&amp;quot;timelineeditortextsample&amp;quot;)color = make_color_hsv(random(255), 255, 128)lock = falsehide = falsedepth = 0model_part = nullmodel_part_name = &amp;quot;&amp;quot;model_shape_vbuffer_map = nullmodel_shape_alpha_map = nullpart_of = nullpart_list = nullpart_root = nullscenery_animate = falsefor (var v = 0; v &amp;lt; e_value.</description>
    </item>
    
    <item>
      <title>window_draw()</title>
      <link>https://ttrtty5.github.io/MIManual/public/%E8%84%9A%E6%9C%AC/window_draw/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ttrtty5.github.io/MIManual/public/%E8%84%9A%E6%9C%AC/window_draw/</guid>
      <description>内容流程 根据app实例变量 window_state 调用window_draw_load_assets(), window_draw_new_assets(), window_draw_exportmovie()
绘制panel区域 panel_area_draw()
绘制窗口移动时的发光效果 window_draw_glow()
工具栏绘制 toolbar_draw()
window_draw_cover()
window_draw_timeline_move()
toolbar_draw_alerts()
绘制下拉菜单 menu_draw()
绘制提示 tip_draw()
debug信息绘制 debug_info_draw()</description>
    </item>
    
    <item>
      <title>代码修改案例</title>
      <link>https://ttrtty5.github.io/MIManual/public/%E4%BB%A3%E7%A0%81%E4%BF%AE%E6%94%B9%E6%A1%88%E4%BE%8B/yyc%E7%BC%96%E8%AF%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ttrtty5.github.io/MIManual/public/%E4%BB%A3%E7%A0%81%E4%BF%AE%E6%94%B9%E6%A1%88%E4%BE%8B/yyc%E7%BC%96%E8%AF%91/</guid>
      <description>https://help.yoyogames.com/hc/en-us/articles/235186048-Setting-Up-For-Windows 在这里，您的Visual Studio 位置需要如下（假设您在其默认位置安装了 Visual Studio）：
VS2015：C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\vcvars32.bat VS2017：C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars32.bat VS2019：C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars32.bat
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars32.bat</description>
    </item>
    
    <item>
      <title>如何为mi添加后处理着色器</title>
      <link>https://ttrtty5.github.io/MIManual/public/%E4%BB%A3%E7%A0%81%E4%BF%AE%E6%94%B9%E6%A1%88%E4%BE%8B/%E5%A6%82%E4%BD%95%E4%B8%BAmi%E6%B7%BB%E5%8A%A0%E5%90%8E%E5%A4%84%E7%90%86%E7%9D%80%E8%89%B2%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ttrtty5.github.io/MIManual/public/%E4%BB%A3%E7%A0%81%E4%BF%AE%E6%94%B9%E6%A1%88%E4%BE%8B/%E5%A6%82%E4%BD%95%E4%B8%BAmi%E6%B7%BB%E5%8A%A0%E5%90%8E%E5%A4%84%E7%90%86%E7%9D%80%E8%89%B2%E5%99%A8/</guid>
      <description>如何为mi添加后处理着色器 渲染流程  mine-imator的渲染流程 (预览视图)
app_event_draw() ↓ window_draw() ↓ panel_area_draw() ↓ view_area_draw() ↓ view_draw(view_main) // view_main = new(obj_view) in app_startup_views()  ↓ view_update() ↓ view_update_surface() ↓ render_high() ← action_toolbar_export ↓ render_high_xxx()   手把手教学   创建一个着色器, e,g:shader_test. 进入render_startup.gml
1.1. (可选)这里有个ds_map()，用来初始化着色器列表.
··· ··· render_mode_shader_map[?e_render_mode.HIGH_LIGHT_NIGHT] = shader_high_light_night render_mode_shader_map[?e_render_mode.HIGH_FOG] = shader_high_fog render_mode_shader_map[?e_render_mode.COLOR_GLOW] = shader_color_glow render_mode_shader_map[?e_render_mode.TEST] = shader_test // ← look here!!! 1.2. (可选) 有一堆 e_render_mode.XXX在enums.gml里，加上你自己的。我加了个 e_render_mode_TEST.
1.3. 进入shader_startup.gml,加上你刚创建的着色器.
// Compiled? if (!err) { shader_map = ds_map_create() new_shader(&amp;#34;shader_alpha_fix&amp;#34;) new_shader(&amp;#34;shader_alpha_test&amp;#34;) new_shader(&amp;#34;shader_blend&amp;#34;) new_shader(&amp;#34;shader_border&amp;#34;) new_shader(&amp;#34;shader_color_camera&amp;#34;) ··· ··· new_shader(&amp;#34;shader_ca&amp;#34;) new_shader(&amp;#34;shader_distort&amp;#34;) new_shader(&amp;#34;shader_test&amp;#34;) // ← look here!</description>
    </item>
    
    <item>
      <title>添加UI</title>
      <link>https://ttrtty5.github.io/MIManual/public/%E4%BB%A3%E7%A0%81%E4%BF%AE%E6%94%B9%E6%A1%88%E4%BE%8B/%E6%B7%BB%E5%8A%A0ui/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ttrtty5.github.io/MIManual/public/%E4%BB%A3%E7%A0%81%E4%BF%AE%E6%94%B9%E6%A1%88%E4%BE%8B/%E6%B7%BB%E5%8A%A0ui/</guid>
      <description>比如需要添加一个bezier曲线参数的滑动条
先定义ui控制的变量, 在enums.gml文件第103行
enum e_value{POS_X,POS_Y,POS_Z,ROT_X,.......amount} 在amount的前面添加你要添加的参数 如BEZIERY
enum e_value{POS_X,POS_Y,POS_Z,ROT_X,.......BEZIERY.amount} 然后在app_startup_lists.gml的第14行内value_name_list列表添加你想添加的参数的命名, 尽量对应
ds_list_add(value_name_list,&amp;quot;POS_X&amp;quot;,&amp;quot;POS_Y&amp;quot;,&amp;quot;POS_Z&amp;quot;,.....&amp;quot;BEZIERY&amp;quot;} 在tl_value_defaul.gml中设置参数的默认值
然后找到你要添加ui的地方, 比如在tab_frame_editor_keyframe.gml里
此时只完成了对参数的声明, 以及ui填入参数的方式, 还需要在tl_update_values中选择对参数的插值方式
比如
tl_update_values_ease(e_value.BEZIER, &amp;quot;instant&amp;quot;, 0) 此时只需要在对应的更新事件脚本中调用tl_edit.value[e_value.BEZIER]获取参数并做你想做的事就行了
注: value_name_list和e_value的长度一定要对应, 不然会报错</description>
    </item>
    
    <item>
      <title>添加及使用shader</title>
      <link>https://ttrtty5.github.io/MIManual/public/%E4%BB%A3%E7%A0%81%E4%BF%AE%E6%94%B9%E6%A1%88%E4%BE%8B/%E6%B7%BB%E5%8A%A0%E5%8F%8A%E4%BD%BF%E7%94%A8shader/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ttrtty5.github.io/MIManual/public/%E4%BB%A3%E7%A0%81%E4%BF%AE%E6%94%B9%E6%A1%88%E4%BE%8B/%E6%B7%BB%E5%8A%A0%E5%8F%8A%E4%BD%BF%E7%94%A8shader/</guid>
      <description>首先是给2d用的shader流程
新建及使用2d shader 在Resources窗口中的shader一栏, 新建一个shader, 这里我命名为shader0
给物体添加一个Draw事件, 在其中写入
shader_set(shader0); // 设置物体的shader为shader0draw_self(); // 绘制用了shader的spriteshader_reset(); // 如果没这一行, 下次绘制将不更新shader 传参给shader 比如我们定义一个color1参数, 由键盘按下→键事件改变color1参数, 传入shader
在物体的create事件中写入
color1_var = [0,1,0,1]; // 在脚本中的变量uni_color1 = shader_get_uniform(shader0,&amp;quot;color1&amp;quot;); // 获取在shader里的color1变量指针 变量修改, 在其他脚本修改color1_var即可, 比如在键盘按下→键事件中写 color1_var[1] -=0.1;
在draw事件中写
shader_set(shader0); // 设置物体的shader为shader0shader_set_uniform_f_array(uni_color1, color1_var); // 通过shader里的变量的地址指针传入在脚本里的变量draw_self(); // 绘制用了shader的spriteshader_reset(); // 如果没这一行, 下一个object也将使用这个shader, 直到shader_reset为止 在shader0的fsh文件中, 最顶上的声明变量中添加uniform vec4 color1;
varying vec2 v_vTexcoord;varying vec4 v_vColour;uniform vec4 u_color;uniform vec4 color1; 传递纹理则是用 glassshader_bgsampler = shader_get_sampler_index(GlassShader, &amp;ldquo;s_BackgroundSampler&amp;rdquo;) spr = sprite_get_texture(sprite_index, 0); shader_set(GlassShader); texture_set_stage(glassshader_bgsampler, spr); shader_reset();</description>
    </item>
    
  </channel>
</rss>
